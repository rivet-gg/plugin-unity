// This file is auto-generated by the Open Game Backend (https://opengb.dev) build system.
// 
// Do not edit this file directly.
//
// Generated at 2024-07-28T09:51:45.793Z

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Backend.Client;
using Backend.Model;

namespace Backend
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class BackendClient : IDisposable
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="BackendClient"/> class.
		/// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
		/// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
		/// </summary>
		/// <returns></returns>
		public BackendClient() : this((string)null)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="BackendClient"/> class.
		/// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
		/// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
		/// </summary>
		/// <param name="basePath">The target service's base path in URL format.</param>
		/// <exception cref="ArgumentException"></exception>
		/// <returns></returns>
		public BackendClient(string basePath)
		{
			this.Configuration = Backend.Client.Configuration.MergeConfigurations(
				Backend.Client.GlobalConfiguration.Instance,
				new Backend.Client.Configuration { BasePath = basePath }
			);
			this.ApiClient = new Backend.Client.ApiClient(this.Configuration.BasePath);
			this.AsynchronousClient = this.ApiClient;
			this.ExceptionFactory = Backend.Client.Configuration.DefaultExceptionFactory;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="BackendClient"/> class using Configuration object.
		/// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
		/// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
		/// </summary>
		/// <param name="configuration">An instance of Configuration.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <returns></returns>
		public BackendClient(Backend.Client.Configuration configuration)
		{
			if (configuration == null) throw new ArgumentNullException("configuration");

			this.Configuration = Backend.Client.Configuration.MergeConfigurations(
				Backend.Client.GlobalConfiguration.Instance,
				configuration
			);
			this.ApiClient = new Backend.Client.ApiClient(this.Configuration.BasePath);
			this.AsynchronousClient = this.ApiClient;
			ExceptionFactory = Backend.Client.Configuration.DefaultExceptionFactory;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="BackendClient"/> class
		/// using a Configuration object and client instance.
		/// </summary>
		/// <param name="asyncClient">The client interface for asynchronous API access.</param>
		/// <param name="configuration">The configuration object.</param>
		/// <exception cref="ArgumentNullException"></exception>
		public BackendClient(Backend.Client.IAsynchronousClient asyncClient, Backend.Client.IReadableConfiguration configuration)
		{
			if (asyncClient == null) throw new ArgumentNullException("asyncClient");
			if (configuration == null) throw new ArgumentNullException("configuration");

			this.AsynchronousClient = asyncClient;
			this.Configuration = configuration;
			this.ExceptionFactory = Backend.Client.Configuration.DefaultExceptionFactory;
		}

		/// <summary>
		/// Disposes resources if they were created by us
		/// </summary>
		public void Dispose()
		{
			this.ApiClient?.Dispose();
		}

		/// <summary>
		/// Holds the ApiClient if created
		/// </summary>
		public Backend.Client.ApiClient ApiClient { get; set; } = null;

		/// <summary>
		/// The client for accessing this underlying API asynchronously.
		/// </summary>
		public Backend.Client.IAsynchronousClient AsynchronousClient { get; set; }

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public string GetBasePath()
		{
			return this.Configuration.BasePath;
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Backend.Client.IReadableConfiguration Configuration { get; set; }

		private Backend.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public Backend.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

private Modules.UsersApi _users;
public Modules.UsersApi Users => _users ??= new Modules.UsersApi(this.AsynchronousClient, this.Configuration);

private Modules.RateLimitApi _rate_limit;
public Modules.RateLimitApi RateLimit => _rate_limit ??= new Modules.RateLimitApi(this.AsynchronousClient, this.Configuration);

private Modules.TokensApi _tokens;
public Modules.TokensApi Tokens => _tokens ??= new Modules.TokensApi(this.AsynchronousClient, this.Configuration);

private Modules.LobbiesApi _lobbies;
public Modules.LobbiesApi Lobbies => _lobbies ??= new Modules.LobbiesApi(this.AsynchronousClient, this.Configuration);

private Modules.RivetApi _rivet;
public Modules.RivetApi Rivet => _rivet ??= new Modules.RivetApi(this.AsynchronousClient, this.Configuration);


			}
		}
		



